---
description: 
globs: 
alwaysApply: true
---
# SessAI - Gu√≠a de Reglas de Cursor

## √çndice de Reglas Disponibles

### 1. [Arquitectura del Proyecto](mdc:.cursor/rules/sessai-architecture.mdc)
**Prop√≥sito**: Gu√≠a completa sobre la estructura, stack tecnol√≥gico y patrones fundamentales del proyecto.

**Cu√°ndo usar**:
- Al crear nuevas p√°ginas o componentes
- Para entender la estructura de directorios
- Al configurar dependencias o herramientas

**Contenido clave**:
- Stack tecnol√≥gico detallado (Next.js, TypeScript, Tailwind, shadcn/ui)
- Estructura de directorios con referencias a archivos
- Patrones de desarrollo y convenciones de c√≥digo
- Hooks personalizados y tipos TypeScript

### 2. [Flujo de Desarrollo](mdc:.cursor/rules/development-workflow.mdc)
**Prop√≥sito**: Mejores pr√°cticas para el desarrollo diario, desde configuraci√≥n hasta patrones de estado.

**Cu√°ndo usar**:
- Al implementar nuevas funcionalidades
- Para manejar formularios y validaci√≥n
- Al trabajar con estados de carga y errores

**Contenido clave**:
- Templates para p√°ginas nuevas
- Patrones de formularios con React Hook Form
- Manejo de estados de carga y errores
- Debugging y logging

### 3. [Componentes UI](mdc:.cursor/rules/ui-components.mdc)
**Prop√≥sito**: Gu√≠a completa del sistema de dise√±o basado en shadcn/ui y patrones visuales.

**Cu√°ndo usar**:
- Al crear interfaces de usuario
- Para mantener consistencia visual
- Al implementar formularios o layouts

**Contenido clave**:
- Cat√°logo de componentes disponibles
- Patrones de layout y responsive design
- Iconograf√≠a con Lucide React
- Estados de validaci√≥n y feedback visual

### 4. [Performance y Optimizaci√≥n](mdc:.cursor/rules/performance-optimization.mdc)
**Prop√≥sito**: T√©cnicas avanzadas para optimizar rendimiento y experiencia de usuario.

**Cu√°ndo usar**:
- Antes de hacer deploy a producci√≥n
- Al implementar componentes pesados
- Para optimizar tiempos de carga

**Contenido clave**:
- Lazy loading y code splitting
- Optimizaci√≥n de im√°genes con Next.js
- Bundle analysis y tree shaking
- Core Web Vitals y m√©tricas

### 5. [Testing y Quality Assurance](mdc:.cursor/rules/testing-quality.mdc)
**Prop√≥sito**: Estrategias completas de testing desde unit tests hasta E2E, incluyendo calidad de c√≥digo.

**Cu√°ndo usar**:
- Al implementar tests para nuevas funcionalidades
- Para configurar pipelines de CI/CD
- Al establecer standards de calidad

**Contenido clave**:
- Configuraci√≥n de Jest y Testing Library
- Patrones de testing para componentes y hooks
- E2E testing con Cypress y Playwright
- ESLint y TypeScript strict mode

### 6. [Data Management & API Integration](mdc:.cursor/rules/data-api-integration.mdc)
**Prop√≥sito**: Arquitectura de datos escalable y migraci√≥n desde mock data hacia APIs reales.

**Cu√°ndo usar**:
- Al planificar integraci√≥n con backend
- Para implementar manejo de estado global
- Al migrar desde datos mock a APIs

**Contenido clave**:
- API client y servicios por entidad
- Custom hooks para data fetching
- React Query integration
- Error handling y caching strategies

## C√≥mo Usar las Reglas Efectivamente

### Flujo de Desarrollo Recomendado

#### Para Nuevas Funcionalidades
1. **Consultar [Arquitectura](mdc:.cursor/rules/sessai-architecture.mdc)** ‚Üí Entender patrones y estructura
2. **Usar [Workflow](mdc:.cursor/rules/development-workflow.mdc)** ‚Üí Templates y mejores pr√°cticas
3. **Aplicar [UI Components](mdc:.cursor/rules/ui-components.mdc)** ‚Üí Dise√±o consistente
4. **Implementar [Testing](mdc:.cursor/rules/testing-quality.mdc)** ‚Üí Coverage y calidad

#### Para Optimizaci√≥n
1. **Revisar [Performance](mdc:.cursor/rules/performance-optimization.mdc)** ‚Üí Identificar mejoras
2. **Aplicar [Data Management](mdc:.cursor/rules/data-api-integration.mdc)** ‚Üí Optimizar fetching
3. **Validar con [Testing](mdc:.cursor/rules/testing-quality.mdc)** ‚Üí M√©tricas y coverage

#### Para Escalabilidad
1. **Planificar con [Data Management](mdc:.cursor/rules/data-api-integration.mdc)** ‚Üí APIs y estado global
2. **Seguir [Arquitectura](mdc:.cursor/rules/sessai-architecture.mdc)** ‚Üí Patrones escalables
3. **Monitorear con [Performance](mdc:.cursor/rules/performance-optimization.mdc)** ‚Üí M√©tricas y optimizaci√≥n

## Quick References

### Comandos Esenciales
```bash
# Desarrollo
pnpm dev              # Servidor de desarrollo
pnpm build           # Build de producci√≥n
pnpm lint            # Verificaci√≥n de c√≥digo

# Testing (cuando est√© configurado)
pnpm test            # Unit tests
pnpm test:e2e        # E2E tests
pnpm test:coverage   # Coverage report

# Performance
pnpm build && npx @next/bundle-analyzer  # An√°lisis de bundle
```

### Estructura de Archivos Clave
- [app/layout.tsx](mdc:app/layout.tsx) - Layout principal
- [components/navigation.tsx](mdc:components/navigation.tsx) - Navegaci√≥n
- [components/ui/](mdc:components/ui) - Componentes base
- [package.json](mdc:package.json) - Dependencias y scripts
- [tailwind.config.ts](mdc:tailwind.config.ts) - Configuraci√≥n de estilos

### Patrones M√°s Usados

#### P√°gina Nueva
```tsx
"use client"
import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
// Seguir patr√≥n completo en development-workflow.mdc
```

#### Formulario
```tsx
const form = useForm<FormData>({
  resolver: zodResolver(schema),
  defaultValues: { /* ... */ }
})
// Ver patrones completos en ui-components.mdc
```

#### API Hook
```tsx
export function useEntity() {
  const [data, setData] = useState([])
  const [loading, setLoading] = useState(false)
  // Ver implementaci√≥n completa en data-api-integration.mdc
}
```

## Mantenimiento de Reglas

### Actualizaci√≥n de Reglas
- **Frecuencia**: Revisar mensualmente o tras cambios mayores
- **Proceso**: Actualizar referencias a archivos si cambia la estructura
- **Validaci√≥n**: Verificar que ejemplos de c√≥digo sigan funcionando

### Contribuci√≥n a Reglas
1. Identificar patr√≥n repetitivo en el desarrollo
2. Documentar en regla existente o crear nueva si es necesario
3. Incluir ejemplos pr√°cticos del proyecto
4. Referenciar archivos espec√≠ficos con `[archivo](mdc:path/archivo)`

### M√©tricas de Efectividad
- **Tiempo de onboarding**: ¬øQu√© tan r√°pido un nuevo dev entiende el proyecto?
- **Consistencia**: ¬øSe siguen los patrones establecidos?
- **Productividad**: ¬øLas reglas aceleran el desarrollo?

## Estado Actual del Proyecto

### ‚úÖ Funcionalidades Implementadas
- Dashboard principal con navegaci√≥n
- Gesti√≥n de pacientes (lista, b√∫squeda, registro)
- Componentes UI consistentes con shadcn/ui
- Estructura de Next.js App Router

### üöß En Desarrollo
- Sistema de sesiones terap√©uticas
- An√°lisis con IA (demo disponible)
- Calendario y citas
- Reportes y analytics

### üìã Pr√≥ximos Pasos
- Implementaci√≥n de backend APIs
- Testing automatizado
- Optimizaciones de performance
- Autenticaci√≥n y autorizaci√≥n

## Contacto y Soporte

Para dudas sobre las reglas o el proyecto:
1. Consultar reglas espec√≠ficas seg√∫n la funcionalidad
2. Revisar archivos de configuraci√≥n relacionados
3. Buscar patrones similares en el c√≥digo existente
4. Documentar nuevos patrones encontrados

