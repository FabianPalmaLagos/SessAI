---
description: 
globs: 
alwaysApply: true
---
# SessAI - Data Management & API Integration

## Arquitectura de Datos

### Estado Actual (Mock Data)
El proyecto actualmente usa datos mock locales. Esta guía prepara la migración hacia una arquitectura de datos real con APIs.

### Estructura de Datos Recomendada
```typescript
// types/api.ts
export interface ApiResponse<T> {
  data: T
  message?: string
  status: 'success' | 'error'
  timestamp: string
}

export interface PaginatedResponse<T> {
  data: T[]
  pagination: {
    page: number
    limit: number
    total: number
    totalPages: number
  }
}

export interface ApiError {
  message: string
  code: string
  details?: Record<string, unknown>
}
```

### Modelos de Datos
```typescript
// types/patient.ts
export interface Patient {
  id: string // UUID en producción
  name: string
  rut?: string
  email?: string
  phone?: string
  birthDate?: string
  address?: {
    street?: string
    city?: string
    region?: string
    zipCode?: string
  }
  status: 'active' | 'inactive' | 'archived'
  createdAt: string
  updatedAt: string
  lastSessionDate?: string
  totalSessions: number
  notes?: string
  emergencyContact?: {
    name: string
    phone: string
    relationship: string
  }
}

// types/session.ts
export interface Session {
  id: string
  patientId: string
  therapistId: string
  date: string
  startTime: string
  endTime: string
  duration: number // en minutos
  type: 'presencial' | 'virtual' | 'telefonica'
  status: 'scheduled' | 'completed' | 'cancelled' | 'no-show'
  notes: string
  goals?: string[]
  assessments?: Assessment[]
  attachments?: Attachment[]
  createdAt: string
  updatedAt: string
}

// types/assessment.ts
export interface Assessment {
  id: string
  sessionId: string
  type: 'mood' | 'anxiety' | 'progress' | 'custom'
  scale: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10
  notes?: string
  createdAt: string
}
```

## API Client Setup

### Fetch Wrapper con Error Handling
```typescript
// lib/api.ts
class ApiClient {
  private baseUrl: string
  private defaultHeaders: Record<string, string>

  constructor(baseUrl: string = process.env.NEXT_PUBLIC_API_URL || '') {
    this.baseUrl = baseUrl
    this.defaultHeaders = {
      'Content-Type': 'application/json',
    }
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    const url = `${this.baseUrl}${endpoint}`
    
    try {
      const response = await fetch(url, {
        ...options,
        headers: {
          ...this.defaultHeaders,
          ...options.headers,
        },
      })

      if (!response.ok) {
        throw new ApiError({
          message: `HTTP ${response.status}: ${response.statusText}`,
          code: response.status.toString(),
        })
      }

      const data = await response.json()
      return data
    } catch (error) {
      console.error('API Error:', error)
      throw error
    }
  }

  async get<T>(endpoint: string): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { method: 'GET' })
  }

  async post<T>(endpoint: string, data: unknown): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    })
  }

  async put<T>(endpoint: string, data: unknown): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
    })
  }

  async delete<T>(endpoint: string): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { method: 'DELETE' })
  }
}

export const apiClient = new ApiClient()
```

### API Services por Entidad
```typescript
// services/patientService.ts
import { apiClient } from '@/lib/api'
import type { Patient, ApiResponse, PaginatedResponse } from '@/types'

export const patientService = {
  async getAll(params?: {
    page?: number
    limit?: number
    search?: string
    status?: string
  }): Promise<PaginatedResponse<Patient>> {
    const searchParams = new URLSearchParams()
    if (params?.page) searchParams.set('page', params.page.toString())
    if (params?.limit) searchParams.set('limit', params.limit.toString())
    if (params?.search) searchParams.set('search', params.search)
    if (params?.status) searchParams.set('status', params.status)

    const response = await apiClient.get<Patient[]>(`/patients?${searchParams}`)
    return response.data as PaginatedResponse<Patient>
  },

  async getById(id: string): Promise<Patient> {
    const response = await apiClient.get<Patient>(`/patients/${id}`)
    return response.data
  },

  async create(patientData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>): Promise<Patient> {
    const response = await apiClient.post<Patient>('/patients', patientData)
    return response.data
  },

  async update(id: string, patientData: Partial<Patient>): Promise<Patient> {
    const response = await apiClient.put<Patient>(`/patients/${id}`, patientData)
    return response.data
  },

  async delete(id: string): Promise<void> {
    await apiClient.delete(`/patients/${id}`)
  },

  async searchByName(name: string): Promise<Patient[]> {
    const response = await apiClient.get<Patient[]>(`/patients/search?name=${encodeURIComponent(name)}`)
    return response.data
  }
}
```

## Custom Hooks para Data Fetching

### Hook Base para API Calls
```typescript
// hooks/useApi.ts
import { useState, useEffect } from 'react'
import type { ApiError } from '@/types/api'

interface UseApiOptions {
  immediate?: boolean
}

interface UseApiState<T> {
  data: T | null
  loading: boolean
  error: ApiError | null
}

export function useApi<T>(
  apiCall: () => Promise<T>,
  options: UseApiOptions = { immediate: true }
) {
  const [state, setState] = useState<UseApiState<T>>({
    data: null,
    loading: false,
    error: null,
  })

  const execute = async () => {
    setState(prev => ({ ...prev, loading: true, error: null }))
    
    try {
      const data = await apiCall()
      setState({ data, loading: false, error: null })
      return data
    } catch (error) {
      const apiError = error as ApiError
      setState(prev => ({ ...prev, loading: false, error: apiError }))
      throw error
    }
  }

  useEffect(() => {
    if (options.immediate) {
      execute()
    }
  }, [])

  return { ...state, execute, refetch: execute }
}
```

### Hooks Específicos de Entidades
```typescript
// hooks/usePatients.ts
import { patientService } from '@/services/patientService'
import { useApi } from './useApi'

export function usePatients(params?: {
  page?: number
  limit?: number
  search?: string
  status?: string
}) {
  return useApi(() => patientService.getAll(params))
}

export function usePatient(id: string) {
  return useApi(() => patientService.getById(id), { immediate: !!id })
}

export function useCreatePatient() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<ApiError | null>(null)

  const createPatient = async (patientData: CreatePatientData) => {
    setLoading(true)
    setError(null)
    
    try {
      const patient = await patientService.create(patientData)
      setLoading(false)
      return patient
    } catch (err) {
      setError(err as ApiError)
      setLoading(false)
      throw err
    }
  }

  return { createPatient, loading, error }
}
```

## State Management Global

### Context para Datos Globales
```typescript
// contexts/DataContext.tsx
import { createContext, useContext, useReducer, ReactNode } from 'react'
import type { Patient, Session } from '@/types'

interface DataState {
  patients: Patient[]
  sessions: Session[]
  selectedPatient: Patient | null
  loading: {
    patients: boolean
    sessions: boolean
  }
}

type DataAction =
  | { type: 'SET_PATIENTS'; payload: Patient[] }
  | { type: 'ADD_PATIENT'; payload: Patient }
  | { type: 'UPDATE_PATIENT'; payload: Patient }
  | { type: 'DELETE_PATIENT'; payload: string }
  | { type: 'SET_SELECTED_PATIENT'; payload: Patient | null }
  | { type: 'SET_LOADING'; payload: { key: keyof DataState['loading']; value: boolean } }

const initialState: DataState = {
  patients: [],
  sessions: [],
  selectedPatient: null,
  loading: {
    patients: false,
    sessions: false,
  }
}

function dataReducer(state: DataState, action: DataAction): DataState {
  switch (action.type) {
    case 'SET_PATIENTS':
      return { ...state, patients: action.payload }
    case 'ADD_PATIENT':
      return { ...state, patients: [...state.patients, action.payload] }
    case 'UPDATE_PATIENT':
      return {
        ...state,
        patients: state.patients.map(p => 
          p.id === action.payload.id ? action.payload : p
        )
      }
    case 'DELETE_PATIENT':
      return {
        ...state,
        patients: state.patients.filter(p => p.id !== action.payload)
      }
    case 'SET_SELECTED_PATIENT':
      return { ...state, selectedPatient: action.payload }
    case 'SET_LOADING':
      return {
        ...state,
        loading: { ...state.loading, [action.payload.key]: action.payload.value }
      }
    default:
      return state
  }
}

const DataContext = createContext<{
  state: DataState
  dispatch: React.Dispatch<DataAction>
} | null>(null)

export function DataProvider({ children }: { children: ReactNode }) {
  const [state, dispatch] = useReducer(dataReducer, initialState)

  return (
    <DataContext.Provider value={{ state, dispatch }}>
      {children}
    </DataContext.Provider>
  )
}

export function useDataContext() {
  const context = useContext(DataContext)
  if (!context) {
    throw new Error('useDataContext must be used within DataProvider')
  }
  return context
}
```

## Caching y Optimización

### React Query Integration (Recomendado)
```typescript
// lib/queryClient.ts
import { QueryClient } from '@tanstack/react-query'

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutos
      cacheTime: 10 * 60 * 1000, // 10 minutos
      retry: 2,
      refetchOnWindowFocus: false,
    },
  },
})

// hooks/usePatients.ts (versión con React Query)
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { patientService } from '@/services/patientService'

export function usePatients(params?: SearchParams) {
  return useQuery({
    queryKey: ['patients', params],
    queryFn: () => patientService.getAll(params),
    keepPreviousData: true,
  })
}

export function useCreatePatient() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: patientService.create,
    onSuccess: () => {
      // Invalidar y refetch la lista de pacientes
      queryClient.invalidateQueries({ queryKey: ['patients'] })
    },
  })
}
```

## Formularios con Validación

### Integración con React Hook Form y Zod
```typescript
// schemas/patient.ts
import { z } from 'zod'

export const patientSchema = z.object({
  name: z.string().min(1, 'Nombre es requerido').max(100),
  rut: z.string().optional(),
  email: z.string().email('Email inválido').optional(),
  phone: z.string().optional(),
  birthDate: z.string().optional(),
  address: z.object({
    street: z.string().optional(),
    city: z.string().optional(),
    region: z.string().optional(),
    zipCode: z.string().optional(),
  }).optional(),
  emergencyContact: z.object({
    name: z.string().min(1, 'Nombre del contacto de emergencia es requerido'),
    phone: z.string().min(1, 'Teléfono del contacto de emergencia es requerido'),
    relationship: z.string().min(1, 'Relación es requerida'),
  }).optional(),
})

export type PatientFormData = z.infer<typeof patientSchema>
```

### Componente de Formulario Optimizado
```typescript
// components/forms/PatientForm.tsx
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { patientSchema, type PatientFormData } from '@/schemas/patient'
import { useCreatePatient } from '@/hooks/usePatients'

interface PatientFormProps {
  defaultValues?: Partial<PatientFormData>
  onSuccess?: (patient: Patient) => void
}

export function PatientForm({ defaultValues, onSuccess }: PatientFormProps) {
  const { createPatient, loading } = useCreatePatient()
  
  const form = useForm<PatientFormData>({
    resolver: zodResolver(patientSchema),
    defaultValues: {
      name: '',
      email: '',
      ...defaultValues,
    },
  })

  const onSubmit = async (data: PatientFormData) => {
    try {
      const patient = await createPatient(data)
      onSuccess?.(patient)
      form.reset()
    } catch (error) {
      console.error('Error creating patient:', error)
    }
  }

  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
      {/* Campos del formulario */}
    </form>
  )
}
```

## Error Handling y Loading States

### Error Boundary Personalizado
```typescript
// components/ErrorBoundary.tsx
import React, { Component, ReactNode } from 'react'
import { AlertCircle } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

interface Props {
  children: ReactNode
  fallback?: ReactNode
}

interface State {
  hasError: boolean
  error?: Error
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo)
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback
      }

      return (
        <Card className="border-red-200 bg-red-50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-red-700">
              <AlertCircle className="h-5 w-5" />
              Error en la Aplicación
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-red-600 mb-4">
              Ha ocurrido un error inesperado. Por favor, recarga la página.
            </p>
            <Button onClick={() => window.location.reload()} variant="outline">
              Recargar Página
            </Button>
          </CardContent>
        </Card>
      )
    }

    return this.props.children
  }
}
```

## Migración desde Mock Data

### Plan de Migración Gradual
1. **Fase 1**: Mantener datos mock, implementar servicios API
2. **Fase 2**: Implementar backend endpoints uno por uno
3. **Fase 3**: Migrar hooks para usar APIs reales
4. **Fase 4**: Implementar caching y optimizaciones
5. **Fase 5**: Eliminar datos mock

### Environment Configuration
```env
# .env.local
NEXT_PUBLIC_API_URL=http://localhost:3001/api
NEXT_PUBLIC_ENVIRONMENT=development
DATABASE_URL=postgresql://...
JWT_SECRET=your-secret-key
```

### Feature Flags para Migración
```typescript
// lib/featureFlags.ts
export const FEATURE_FLAGS = {
  USE_REAL_API: process.env.NEXT_PUBLIC_USE_REAL_API === 'true',
  ENABLE_CACHING: process.env.NEXT_PUBLIC_ENABLE_CACHING === 'true',
} as const

// hooks/usePatients.ts
export function usePatients() {
  if (FEATURE_FLAGS.USE_REAL_API) {
    return useQuery(['patients'], patientService.getAll)
  } else {
    // Fallback a datos mock
    return { data: mockPatients, loading: false, error: null }
  }
}
```

